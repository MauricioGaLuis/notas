/* Estructura de proyecto ASP.NET Core MVC:

DashboardRecargas/ ├── Controllers/ │   └── DashboardController.cs ├── Models/ │   └── Recarga.cs ├── Data/ │   └── AppDbContext.cs ├── Views/ │   └── Dashboard/ │       └── Index.cshtml ├── wwwroot/ ├── appsettings.json ├── Program.cs ├── Startup.cs (si usas .NET 5) ├── DashboardRecargas.csproj */

// DashboardRecargas.csproj <Project Sdk="Microsoft.NET.Sdk.Web"> <PropertyGroup> <TargetFramework>net6.0</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="6.0.0" /> <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="6.0.0"> <PrivateAssets>all</PrivateAssets> </PackageReference> </ItemGroup> </Project>

// Program.cs var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews(); builder.Services.AddDbContext<AppDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

var app = builder.Build();

app.UseStaticFiles(); app.UseRouting(); app.MapControllerRoute( name: "default", pattern: "{controller=Dashboard}/{action=Index}/{id?}");

app.Run();

// appsettings.json { "ConnectionStrings": { "DefaultConnection": "Server=localhost;Database=RecargasDB;Trusted_Connection=True;" // Modifica según tu entorno } }

// Models/Recarga.cs public class Recarga { public int Id { get; set; } public string Marca { get; set; } public decimal MontoRecarga { get; set; } public DateTime FechaRecarga { get; set; } public int Estatus { get; set; } public int Modalidad { get; set; } }

// Data/AppDbContext.cs public class AppDbContext : DbContext { public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { } public DbSet<Recarga> Recargas { get; set; } }

// Controllers/DashboardController.cs public class DashboardController : Controller { private readonly AppDbContext _context;

public DashboardController(AppDbContext context)
{
    _context = context;
}

public IActionResult Index() => View();

[HttpGet]
public IActionResult GetData()
{
    var datos = _context.Recargas
        .GroupBy(r => r.Marca)
        .Select(g => new {
            marca = g.Key,
            total = g.Sum(x => x.MontoRecarga)
        }).ToList();

    return Json(datos);
}

}

// Views/Dashboard/Index.cshtml @{ ViewData["Title"] = "Dashboard de Recargas"; }

<h2>Dashboard de Recargas</h2>
<canvas id="chartRecargas" width="600" height="400"></canvas><script src="https://cdn.jsdelivr.net/npm/chart.js"></script><script>
    var chart;
    function cargarDatos() {
        fetch('/Dashboard/GetData')
            .then(response => response.json())
            .then(data => {
                const labels = data.map(d => d.marca);
                const valores = data.map(d => d.total);

                if (chart) {
                    chart.data.labels = labels;
                    chart.data.datasets[0].data = valores;
                    chart.update();
                } else {
                    const ctx = document.getElementById('chartRecargas').getContext('2d');
                    chart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Monto por Marca',
                                data: valores,
                                backgroundColor: 'rgba(54, 162, 235, 0.5)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                }
            });
    }
    cargarDatos();
    setInterval(cargarDatos, 60000);
</script>
