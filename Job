using Quartz;
using System;
using System.Threading.Tasks;

public class LimpiezaJob : IJob
{
    public Task Execute(IJobExecutionContext context)
    {
        Console.WriteLine("Ejecutando limpieza a las " + DateTime.Now);
        // Aquí pones tu lógica de limpieza de la base de datos.
        return Task.CompletedTask;
    }
}

/////////

using Quartz;
using Quartz.Impl;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main(string[] args)
    {
        // Crear el planificador
        StdSchedulerFactory factory = new StdSchedulerFactory();
        IScheduler scheduler = await factory.GetScheduler();
        await scheduler.Start();

        // Crear el job
        IJobDetail job = JobBuilder.Create<LimpiezaJob>()
            .WithIdentity("limpiezaJob", "grupo1")
            .Build();

        // Crear el trigger para las 00:00 todos los días
        ITrigger trigger = TriggerBuilder.Create()
            .WithIdentity("triggerLimpieza", "grupo1")
            .WithSchedule(CronScheduleBuilder.DailyAtHourAndMinute(0, 0))
            .Build();

        await scheduler.ScheduleJob(job, trigger);
    }
}

//////////////
public class LimpiezaJob : IJob
{
    public async Task Execute(IJobExecutionContext context)
    {
        string connectionString = "Data Source=SERVIDOR;Initial Catalog=MiBaseDeDatos;Integrated Security=True;";
        var limpieza = new LimpiezaService(connectionString);
        await limpieza.EjecutarLimpiezaAsync();
    }
}
///////////
using System;
using System.Data.SqlClient;
using System.Threading.Tasks;

public class LimpiezaService
{
    private readonly string _connectionString;

    public LimpiezaService(string connectionString)
    {
        _connectionString = connectionString;
    }

    public async Task EjecutarLimpiezaAsync()
    {
        var fechaLimite = DateTime.Now.AddDays(-30);

        string sql = "DELETE FROM MiTabla WHERE FechaCreacion < @FechaLimite";

        using (SqlConnection conn = new SqlConnection(_connectionString))
        using (SqlCommand cmd = new SqlCommand(sql, conn))
        {
            cmd.Parameters.AddWithValue("@FechaLimite", fechaLimite);

            await conn.OpenAsync();
            int filasAfectadas = await cmd.ExecuteNonQueryAsync();
            Console.WriteLine($"Limpieza completada. Registros eliminados: {filasAfectadas}");
        }
    }
}
